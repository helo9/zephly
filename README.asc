image::boards/arm/openpilot_cc3d/doc/demoframe.jpg[demoframe, 640]

image::https://github.com/helo9/zephly/actions/workflows/test.yml/badge.svg[actions-badge]

= Zephly

WARNING: This software is in very early development state.

Attempt to implement a flight controller based on zephyr rtos.

== Getting started

. Follow the zephyr Getting Started Instructions and ensure system and python dependencies are installed. Furthermore consider installing the zephyr toolchain to simplify later usage.

. Create an empty folder for the fc development and use west to download the sources
+
----
mkdir fcdev
west init -m https://github.com/helo9/zephly --mr main fcdev
cd fcdev
west update
west zephyr-export
----
+
`west` has downloaded the _zephly_ repo into _fcdev/zephly_

. Build for Copter Control 3D to verify installation:
+
----
cd zephly/
west build --board=openpilot_cc3d -s app
----

The following folders have been created now inside of _fcdev_ controlled by _fcdev/zephly/west.yml_

* **zephly** : A clone of the actual flight controller code (main branch)
* **zephyr** : A clone of the main zephyr rtos repo at a certain state, defined in _west.yml_
* **modules** : A collection of external libraries prepared for usage with zephyr, zephly additionally adds some drone specific libraries here.
* **bootloader** and **tools** : Some atm more or less not by zephly used folders.

The content of _zephly_ more or less reproduces _zephyr_:

* **.github** : A Github specific folder holding the CI workflows.
* **app** : The actual flight controller application and the configuration. To build run
+
----
west build --board=<A_SUPPORTED_BOARD> app
----
+
This creates a standalone application, you can flash. This holds also true for the later mentioned tests and samples.

* **boards** : A folder holding the board specific devicetree files and configuration.
* **cmake** : A colleciton of additional cmake functions / build targets (atm only holding the sim target).
* **docs** : A documentation folder based on sphinx.
* **drivers** : A folder for driver implementations. Zephly hardly uses custom drivers atm and relies in most cases on the zephly drivers. The few custom drivers can be found here.
* **dts** : A folder holding devicetree specifications for SOCs in zephyr and the bindings for drivers.
* **include** : A folder for header files of custom drivers etc.
* **lib** : A folder for custom libraries.
* **prototyping** : A collection of Jupyter Notebooks with some prototype Python implementations, used to gain understanding and generate test data.
* **samples** : A collection of standalone sample applications, which mainly focus on custom drivers and other features also integrated into app later on. The samples stay there to allow for more in detail examination of single modules.
* **tests** : A collection of unit tests for native_posix target, automatically running in CI.
